class Person
    int floorFrom               // start from 0
    int floorTo
    bool waiting                // waiting for elevator; can be idle
    float arrivalTime

    void call()                 // elevator is called
        if from floor0: 
            10 people per min = 1 person / 6 sec = average 6 sec arrivalTime
        else : 
            5 people per min = 1 person / 12 sec = average 12 sec arrivalTime
        
        arrivalTime
        Elevator.fetch(this);



class Elevator 
    int currentFloor            // 6 floors, 0-5
    list people

    final double timeMove = 6   // time to get from floor to floor
    final double timeOn = 2     // time for people to get on the elevator
    final double timeOff = 2    // time for people to get off the elevator

    static void fetch(person)   // closest elevator picks person(s) up
        this = minDifference(elevators)

        timeMove
        this.currentFloor = person.floorFrom

        timeOn
        elevatorX.add(person)

        deliver();

    void deliver()              // delivers people to desired floor
        timeMove
        this.currentFloor = person.floorTo

        timeOff
        elevatorThis.remove(person)

    void dispatch 
        // function used to dispatch the nearest idle elevator to floor requested
        if (distance1 > dist2 && dist3 && dist4)
            return elevator
        


Controller 
    new Clock = Clock
    int statistics[];
    let flr = 0;

    while (!delayed_list.isEmpty()) { // clock.update();
        goToFloor(flr);
        clock.update();
        statistics[i] = clock.time();
    } // should be in function in elevator class

    while (elevator.isIdle()) {
        // while elevator is idle
        // do nothing
        // out of 4 elevators, the closest one takes the request
        // need to be efficient and not send an elevator to a floor where another is closer,
        // so leave it idle for another request
    } // should be in function in elevator class

    main {
        // uses above loop/logic to maintain delayed_list & dispatch elevator
        // can generate people?
    }



/*
Events:
    Person arrived at floorA
    ElevatorX came to floorA from floorB
    Person entered ElevatorX
    ElevatorX dropped Person off at floorC

Stats:
    How long it takes for each person to get to their desired floor?

Rules:
    // No person in the building at start of program
    No "button pressing"
    10 people every min, about half come from the 0 floor

Unknown:
    What generates people?
    People arriving during process?
        Incorporate timing of things
    Maybe add floor queue for elevator?
*/

